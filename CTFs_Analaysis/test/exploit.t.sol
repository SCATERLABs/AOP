// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.19;

import "forge-std/Test.sol";
import "../src/DinoPark.sol";
import "../src/Arena.sol";
import "../src/Exploit.sol";

contract ExploitTest is Test {
    DinoPark public park;
    Arena public arena;
    Attacker public attacker;

    function setUp() public {
        // Control block randomness
        vm.warp(1111);                // Set block.timestamp
        vm.prevrandao(0xBEEF);        // Set block.prevrandao

        // Deploy DinoPark (also deploys Arena)
        park = new DinoPark{value: 1 ether}();

        // Access Arena instance deployed inside DinoPark
        arena = Arena(address(park.arena()));

        // Deploy the attacker contract
        attacker = new Attacker(address(arena), address(park));

        // Fund the attacker in case it's needed (for reentrancy payout)
        vm.deal(address(attacker), 0.1 ether);
    }

    function testExploit() public {
        // Exploit: reentrancy + RNG win loop
        attacker.pwn();

        // Claim golden egg after draining Arena
        attacker.claim();

        // Check if we solved the challenge
        assertTrue(park.isSolved(), "Exploit failed: not solved");
    }
}
